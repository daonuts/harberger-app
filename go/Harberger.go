// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package harberger

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HarbergerABI is the input ABI used to generate the binding from.
const HarbergerABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tax\",\"type\":\"uint24\"}],\"name\":\"setTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_ownerURI\",\"type\":\"string\"}],\"name\":\"setOwnerURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_onlyIfSelfOwned\",\"type\":\"bool\"}],\"name\":\"credit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_ownerURI\",\"type\":\"string\"},{\"name\":\"_credit\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"taxDue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"collectTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"lastPaymentDate\",\"type\":\"uint64\"},{\"name\":\"tax\",\"type\":\"uint24\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"metaURI\",\"type\":\"string\"},{\"name\":\"ownerURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metaURI\",\"type\":\"string\"},{\"name\":\"_tax\",\"type\":\"uint24\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODIFY_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PURCHASE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_metaURI\",\"type\":\"string\"}],\"name\":\"setMetaURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expiration\",\"type\":\"uint64\"}],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_metaURI\",\"type\":\"string\"}],\"name\":\"MetaURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ownerURI\",\"type\":\"string\"}],\"name\":\"OwnerURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tax\",\"type\":\"uint24\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// HarbergerBin is the compiled bytecode used for deploying new contracts.
const HarbergerBin = ``

// DeployHarberger deploys a new Ethereum contract, binding an instance of Harberger to it.
func DeployHarberger(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Harberger, error) {
	parsed, err := abi.JSON(strings.NewReader(HarbergerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(HarbergerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Harberger{HarbergerCaller: HarbergerCaller{contract: contract}, HarbergerTransactor: HarbergerTransactor{contract: contract}, HarbergerFilterer: HarbergerFilterer{contract: contract}}, nil
}

// Harberger is an auto generated Go binding around an Ethereum contract.
type Harberger struct {
	HarbergerCaller     // Read-only binding to the contract
	HarbergerTransactor // Write-only binding to the contract
	HarbergerFilterer   // Log filterer for contract events
}

// HarbergerCaller is an auto generated read-only Go binding around an Ethereum contract.
type HarbergerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HarbergerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HarbergerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HarbergerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HarbergerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HarbergerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HarbergerSession struct {
	Contract     *Harberger        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HarbergerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HarbergerCallerSession struct {
	Contract *HarbergerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// HarbergerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HarbergerTransactorSession struct {
	Contract     *HarbergerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// HarbergerRaw is an auto generated low-level Go binding around an Ethereum contract.
type HarbergerRaw struct {
	Contract *Harberger // Generic contract binding to access the raw methods on
}

// HarbergerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HarbergerCallerRaw struct {
	Contract *HarbergerCaller // Generic read-only contract binding to access the raw methods on
}

// HarbergerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HarbergerTransactorRaw struct {
	Contract *HarbergerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHarberger creates a new instance of Harberger, bound to a specific deployed contract.
func NewHarberger(address common.Address, backend bind.ContractBackend) (*Harberger, error) {
	contract, err := bindHarberger(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Harberger{HarbergerCaller: HarbergerCaller{contract: contract}, HarbergerTransactor: HarbergerTransactor{contract: contract}, HarbergerFilterer: HarbergerFilterer{contract: contract}}, nil
}

// NewHarbergerCaller creates a new read-only instance of Harberger, bound to a specific deployed contract.
func NewHarbergerCaller(address common.Address, caller bind.ContractCaller) (*HarbergerCaller, error) {
	contract, err := bindHarberger(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HarbergerCaller{contract: contract}, nil
}

// NewHarbergerTransactor creates a new write-only instance of Harberger, bound to a specific deployed contract.
func NewHarbergerTransactor(address common.Address, transactor bind.ContractTransactor) (*HarbergerTransactor, error) {
	contract, err := bindHarberger(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HarbergerTransactor{contract: contract}, nil
}

// NewHarbergerFilterer creates a new log filterer instance of Harberger, bound to a specific deployed contract.
func NewHarbergerFilterer(address common.Address, filterer bind.ContractFilterer) (*HarbergerFilterer, error) {
	contract, err := bindHarberger(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HarbergerFilterer{contract: contract}, nil
}

// bindHarberger binds a generic wrapper to an already deployed contract.
func bindHarberger(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HarbergerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Harberger *HarbergerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Harberger.Contract.HarbergerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Harberger *HarbergerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Harberger.Contract.HarbergerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Harberger *HarbergerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Harberger.Contract.HarbergerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Harberger *HarbergerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Harberger.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Harberger *HarbergerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Harberger.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Harberger *HarbergerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Harberger.Contract.contract.Transact(opts, method, params...)
}

// BURNROLE is a free data retrieval call binding the contract method 0xb930908f.
//
// Solidity: function BURN_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCaller) BURNROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "BURN_ROLE")
	return *ret0, err
}

// BURNROLE is a free data retrieval call binding the contract method 0xb930908f.
//
// Solidity: function BURN_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerSession) BURNROLE() ([32]byte, error) {
	return _Harberger.Contract.BURNROLE(&_Harberger.CallOpts)
}

// BURNROLE is a free data retrieval call binding the contract method 0xb930908f.
//
// Solidity: function BURN_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCallerSession) BURNROLE() ([32]byte, error) {
	return _Harberger.Contract.BURNROLE(&_Harberger.CallOpts)
}

// MINTROLE is a free data retrieval call binding the contract method 0xe9a9c850.
//
// Solidity: function MINT_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCaller) MINTROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "MINT_ROLE")
	return *ret0, err
}

// MINTROLE is a free data retrieval call binding the contract method 0xe9a9c850.
//
// Solidity: function MINT_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerSession) MINTROLE() ([32]byte, error) {
	return _Harberger.Contract.MINTROLE(&_Harberger.CallOpts)
}

// MINTROLE is a free data retrieval call binding the contract method 0xe9a9c850.
//
// Solidity: function MINT_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCallerSession) MINTROLE() ([32]byte, error) {
	return _Harberger.Contract.MINTROLE(&_Harberger.CallOpts)
}

// MODIFYROLE is a free data retrieval call binding the contract method 0xd970565b.
//
// Solidity: function MODIFY_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCaller) MODIFYROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "MODIFY_ROLE")
	return *ret0, err
}

// MODIFYROLE is a free data retrieval call binding the contract method 0xd970565b.
//
// Solidity: function MODIFY_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerSession) MODIFYROLE() ([32]byte, error) {
	return _Harberger.Contract.MODIFYROLE(&_Harberger.CallOpts)
}

// MODIFYROLE is a free data retrieval call binding the contract method 0xd970565b.
//
// Solidity: function MODIFY_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCallerSession) MODIFYROLE() ([32]byte, error) {
	return _Harberger.Contract.MODIFYROLE(&_Harberger.CallOpts)
}

// PURCHASEROLE is a free data retrieval call binding the contract method 0xea9fc179.
//
// Solidity: function PURCHASE_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCaller) PURCHASEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "PURCHASE_ROLE")
	return *ret0, err
}

// PURCHASEROLE is a free data retrieval call binding the contract method 0xea9fc179.
//
// Solidity: function PURCHASE_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerSession) PURCHASEROLE() ([32]byte, error) {
	return _Harberger.Contract.PURCHASEROLE(&_Harberger.CallOpts)
}

// PURCHASEROLE is a free data retrieval call binding the contract method 0xea9fc179.
//
// Solidity: function PURCHASE_ROLE() constant returns(bytes32)
func (_Harberger *HarbergerCallerSession) PURCHASEROLE() ([32]byte, error) {
	return _Harberger.Contract.PURCHASEROLE(&_Harberger.CallOpts)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Harberger *HarbergerCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Harberger *HarbergerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Harberger.Contract.AllowRecoverability(&_Harberger.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Harberger *HarbergerCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Harberger.Contract.AllowRecoverability(&_Harberger.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Harberger *HarbergerCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Harberger *HarbergerSession) AppId() ([32]byte, error) {
	return _Harberger.Contract.AppId(&_Harberger.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Harberger *HarbergerCallerSession) AppId() ([32]byte, error) {
	return _Harberger.Contract.AppId(&_Harberger.CallOpts)
}

// Assets is a free data retrieval call binding the contract method 0xcf35bdd0.
//
// Solidity: function assets(uint256 ) constant returns(bool active, address owner, uint64 lastPaymentDate, uint24 tax, uint256 price, uint256 balance, string metaURI, string ownerURI)
func (_Harberger *HarbergerCaller) Assets(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Active          bool
	Owner           common.Address
	LastPaymentDate uint64
	Tax             *big.Int
	Price           *big.Int
	Balance         *big.Int
	MetaURI         string
	OwnerURI        string
}, error) {
	ret := new(struct {
		Active          bool
		Owner           common.Address
		LastPaymentDate uint64
		Tax             *big.Int
		Price           *big.Int
		Balance         *big.Int
		MetaURI         string
		OwnerURI        string
	})
	out := ret
	err := _Harberger.contract.Call(opts, out, "assets", arg0)
	return *ret, err
}

// Assets is a free data retrieval call binding the contract method 0xcf35bdd0.
//
// Solidity: function assets(uint256 ) constant returns(bool active, address owner, uint64 lastPaymentDate, uint24 tax, uint256 price, uint256 balance, string metaURI, string ownerURI)
func (_Harberger *HarbergerSession) Assets(arg0 *big.Int) (struct {
	Active          bool
	Owner           common.Address
	LastPaymentDate uint64
	Tax             *big.Int
	Price           *big.Int
	Balance         *big.Int
	MetaURI         string
	OwnerURI        string
}, error) {
	return _Harberger.Contract.Assets(&_Harberger.CallOpts, arg0)
}

// Assets is a free data retrieval call binding the contract method 0xcf35bdd0.
//
// Solidity: function assets(uint256 ) constant returns(bool active, address owner, uint64 lastPaymentDate, uint24 tax, uint256 price, uint256 balance, string metaURI, string ownerURI)
func (_Harberger *HarbergerCallerSession) Assets(arg0 *big.Int) (struct {
	Active          bool
	Owner           common.Address
	LastPaymentDate uint64
	Tax             *big.Int
	Price           *big.Int
	Balance         *big.Int
	MetaURI         string
	OwnerURI        string
}, error) {
	return _Harberger.Contract.Assets(&_Harberger.CallOpts, arg0)
}

// AssetsCount is a free data retrieval call binding the contract method 0xcd9df190.
//
// Solidity: function assetsCount() constant returns(uint256)
func (_Harberger *HarbergerCaller) AssetsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "assetsCount")
	return *ret0, err
}

// AssetsCount is a free data retrieval call binding the contract method 0xcd9df190.
//
// Solidity: function assetsCount() constant returns(uint256)
func (_Harberger *HarbergerSession) AssetsCount() (*big.Int, error) {
	return _Harberger.Contract.AssetsCount(&_Harberger.CallOpts)
}

// AssetsCount is a free data retrieval call binding the contract method 0xcd9df190.
//
// Solidity: function assetsCount() constant returns(uint256)
func (_Harberger *HarbergerCallerSession) AssetsCount() (*big.Int, error) {
	return _Harberger.Contract.AssetsCount(&_Harberger.CallOpts)
}

// BalanceExpiration is a free data retrieval call binding the contract method 0x023737ac.
//
// Solidity: function balanceExpiration(uint256 _tokenId) constant returns(uint64)
func (_Harberger *HarbergerCaller) BalanceExpiration(opts *bind.CallOpts, _tokenId *big.Int) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "balanceExpiration", _tokenId)
	return *ret0, err
}

// BalanceExpiration is a free data retrieval call binding the contract method 0x023737ac.
//
// Solidity: function balanceExpiration(uint256 _tokenId) constant returns(uint64)
func (_Harberger *HarbergerSession) BalanceExpiration(_tokenId *big.Int) (uint64, error) {
	return _Harberger.Contract.BalanceExpiration(&_Harberger.CallOpts, _tokenId)
}

// BalanceExpiration is a free data retrieval call binding the contract method 0x023737ac.
//
// Solidity: function balanceExpiration(uint256 _tokenId) constant returns(uint64)
func (_Harberger *HarbergerCallerSession) BalanceExpiration(_tokenId *big.Int) (uint64, error) {
	return _Harberger.Contract.BalanceExpiration(&_Harberger.CallOpts, _tokenId)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Harberger *HarbergerCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Harberger *HarbergerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Harberger.Contract.CanPerform(&_Harberger.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Harberger *HarbergerCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Harberger.Contract.CanPerform(&_Harberger.CallOpts, _sender, _role, _params)
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Harberger *HarbergerCaller) Currency(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "currency")
	return *ret0, err
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Harberger *HarbergerSession) Currency() (common.Address, error) {
	return _Harberger.Contract.Currency(&_Harberger.CallOpts)
}

// Currency is a free data retrieval call binding the contract method 0xe5a6b10f.
//
// Solidity: function currency() constant returns(address)
func (_Harberger *HarbergerCallerSession) Currency() (common.Address, error) {
	return _Harberger.Contract.Currency(&_Harberger.CallOpts)
}

// CurrencyManager is a free data retrieval call binding the contract method 0x0f747d74.
//
// Solidity: function currencyManager() constant returns(address)
func (_Harberger *HarbergerCaller) CurrencyManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "currencyManager")
	return *ret0, err
}

// CurrencyManager is a free data retrieval call binding the contract method 0x0f747d74.
//
// Solidity: function currencyManager() constant returns(address)
func (_Harberger *HarbergerSession) CurrencyManager() (common.Address, error) {
	return _Harberger.Contract.CurrencyManager(&_Harberger.CallOpts)
}

// CurrencyManager is a free data retrieval call binding the contract method 0x0f747d74.
//
// Solidity: function currencyManager() constant returns(address)
func (_Harberger *HarbergerCallerSession) CurrencyManager() (common.Address, error) {
	return _Harberger.Contract.CurrencyManager(&_Harberger.CallOpts)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Harberger *HarbergerCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Harberger *HarbergerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Harberger.Contract.GetEVMScriptExecutor(&_Harberger.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Harberger *HarbergerCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Harberger.Contract.GetEVMScriptExecutor(&_Harberger.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Harberger *HarbergerCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Harberger *HarbergerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Harberger.Contract.GetEVMScriptRegistry(&_Harberger.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Harberger *HarbergerCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Harberger.Contract.GetEVMScriptRegistry(&_Harberger.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Harberger *HarbergerCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Harberger *HarbergerSession) GetInitializationBlock() (*big.Int, error) {
	return _Harberger.Contract.GetInitializationBlock(&_Harberger.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Harberger *HarbergerCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Harberger.Contract.GetInitializationBlock(&_Harberger.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Harberger *HarbergerCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Harberger *HarbergerSession) GetRecoveryVault() (common.Address, error) {
	return _Harberger.Contract.GetRecoveryVault(&_Harberger.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Harberger *HarbergerCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Harberger.Contract.GetRecoveryVault(&_Harberger.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Harberger *HarbergerCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Harberger *HarbergerSession) HasInitialized() (bool, error) {
	return _Harberger.Contract.HasInitialized(&_Harberger.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Harberger *HarbergerCallerSession) HasInitialized() (bool, error) {
	return _Harberger.Contract.HasInitialized(&_Harberger.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Harberger *HarbergerCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Harberger *HarbergerSession) IsPetrified() (bool, error) {
	return _Harberger.Contract.IsPetrified(&_Harberger.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Harberger *HarbergerCallerSession) IsPetrified() (bool, error) {
	return _Harberger.Contract.IsPetrified(&_Harberger.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Harberger *HarbergerCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Harberger *HarbergerSession) Kernel() (common.Address, error) {
	return _Harberger.Contract.Kernel(&_Harberger.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Harberger *HarbergerCallerSession) Kernel() (common.Address, error) {
	return _Harberger.Contract.Kernel(&_Harberger.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Harberger *HarbergerCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Harberger *HarbergerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Harberger.Contract.OwnerOf(&_Harberger.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) constant returns(address)
func (_Harberger *HarbergerCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Harberger.Contract.OwnerOf(&_Harberger.CallOpts, _tokenId)
}

// TaxDue is a free data retrieval call binding the contract method 0x9f4e3869.
//
// Solidity: function taxDue(uint256 _tokenId) constant returns(uint256)
func (_Harberger *HarbergerCaller) TaxDue(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Harberger.contract.Call(opts, out, "taxDue", _tokenId)
	return *ret0, err
}

// TaxDue is a free data retrieval call binding the contract method 0x9f4e3869.
//
// Solidity: function taxDue(uint256 _tokenId) constant returns(uint256)
func (_Harberger *HarbergerSession) TaxDue(_tokenId *big.Int) (*big.Int, error) {
	return _Harberger.Contract.TaxDue(&_Harberger.CallOpts, _tokenId)
}

// TaxDue is a free data retrieval call binding the contract method 0x9f4e3869.
//
// Solidity: function taxDue(uint256 _tokenId) constant returns(uint256)
func (_Harberger *HarbergerCallerSession) TaxDue(_tokenId *big.Int) (*big.Int, error) {
	return _Harberger.Contract.TaxDue(&_Harberger.CallOpts, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _tokenId) returns()
func (_Harberger *HarbergerTransactor) Burn(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "burn", _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _tokenId) returns()
func (_Harberger *HarbergerSession) Burn(_tokenId *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Burn(&_Harberger.TransactOpts, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _tokenId) returns()
func (_Harberger *HarbergerTransactorSession) Burn(_tokenId *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Burn(&_Harberger.TransactOpts, _tokenId)
}

// Buy is a paid mutator transaction binding the contract method 0x97863bf6.
//
// Solidity: function buy(uint256 _tokenId, uint256 _price, string _ownerURI, uint256 _credit) returns()
func (_Harberger *HarbergerTransactor) Buy(opts *bind.TransactOpts, _tokenId *big.Int, _price *big.Int, _ownerURI string, _credit *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "buy", _tokenId, _price, _ownerURI, _credit)
}

// Buy is a paid mutator transaction binding the contract method 0x97863bf6.
//
// Solidity: function buy(uint256 _tokenId, uint256 _price, string _ownerURI, uint256 _credit) returns()
func (_Harberger *HarbergerSession) Buy(_tokenId *big.Int, _price *big.Int, _ownerURI string, _credit *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Buy(&_Harberger.TransactOpts, _tokenId, _price, _ownerURI, _credit)
}

// Buy is a paid mutator transaction binding the contract method 0x97863bf6.
//
// Solidity: function buy(uint256 _tokenId, uint256 _price, string _ownerURI, uint256 _credit) returns()
func (_Harberger *HarbergerTransactorSession) Buy(_tokenId *big.Int, _price *big.Int, _ownerURI string, _credit *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Buy(&_Harberger.TransactOpts, _tokenId, _price, _ownerURI, _credit)
}

// CollectTax is a paid mutator transaction binding the contract method 0xb018eb1c.
//
// Solidity: function collectTax(uint256 _tokenId) returns()
func (_Harberger *HarbergerTransactor) CollectTax(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "collectTax", _tokenId)
}

// CollectTax is a paid mutator transaction binding the contract method 0xb018eb1c.
//
// Solidity: function collectTax(uint256 _tokenId) returns()
func (_Harberger *HarbergerSession) CollectTax(_tokenId *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.CollectTax(&_Harberger.TransactOpts, _tokenId)
}

// CollectTax is a paid mutator transaction binding the contract method 0xb018eb1c.
//
// Solidity: function collectTax(uint256 _tokenId) returns()
func (_Harberger *HarbergerTransactorSession) CollectTax(_tokenId *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.CollectTax(&_Harberger.TransactOpts, _tokenId)
}

// Credit is a paid mutator transaction binding the contract method 0x8fe15019.
//
// Solidity: function credit(uint256 _tokenId, uint256 _amount, bool _onlyIfSelfOwned) returns()
func (_Harberger *HarbergerTransactor) Credit(opts *bind.TransactOpts, _tokenId *big.Int, _amount *big.Int, _onlyIfSelfOwned bool) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "credit", _tokenId, _amount, _onlyIfSelfOwned)
}

// Credit is a paid mutator transaction binding the contract method 0x8fe15019.
//
// Solidity: function credit(uint256 _tokenId, uint256 _amount, bool _onlyIfSelfOwned) returns()
func (_Harberger *HarbergerSession) Credit(_tokenId *big.Int, _amount *big.Int, _onlyIfSelfOwned bool) (*types.Transaction, error) {
	return _Harberger.Contract.Credit(&_Harberger.TransactOpts, _tokenId, _amount, _onlyIfSelfOwned)
}

// Credit is a paid mutator transaction binding the contract method 0x8fe15019.
//
// Solidity: function credit(uint256 _tokenId, uint256 _amount, bool _onlyIfSelfOwned) returns()
func (_Harberger *HarbergerTransactorSession) Credit(_tokenId *big.Int, _amount *big.Int, _onlyIfSelfOwned bool) (*types.Transaction, error) {
	return _Harberger.Contract.Credit(&_Harberger.TransactOpts, _tokenId, _amount, _onlyIfSelfOwned)
}

// Debit is a paid mutator transaction binding the contract method 0xe747f31c.
//
// Solidity: function debit(uint256 _tokenId, uint256 _amount) returns()
func (_Harberger *HarbergerTransactor) Debit(opts *bind.TransactOpts, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "debit", _tokenId, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0xe747f31c.
//
// Solidity: function debit(uint256 _tokenId, uint256 _amount) returns()
func (_Harberger *HarbergerSession) Debit(_tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Debit(&_Harberger.TransactOpts, _tokenId, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0xe747f31c.
//
// Solidity: function debit(uint256 _tokenId, uint256 _amount) returns()
func (_Harberger *HarbergerTransactorSession) Debit(_tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Debit(&_Harberger.TransactOpts, _tokenId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _currencyManager) returns()
func (_Harberger *HarbergerTransactor) Initialize(opts *bind.TransactOpts, _currencyManager common.Address) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "initialize", _currencyManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _currencyManager) returns()
func (_Harberger *HarbergerSession) Initialize(_currencyManager common.Address) (*types.Transaction, error) {
	return _Harberger.Contract.Initialize(&_Harberger.TransactOpts, _currencyManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _currencyManager) returns()
func (_Harberger *HarbergerTransactorSession) Initialize(_currencyManager common.Address) (*types.Transaction, error) {
	return _Harberger.Contract.Initialize(&_Harberger.TransactOpts, _currencyManager)
}

// Mint is a paid mutator transaction binding the contract method 0xd868d852.
//
// Solidity: function mint(string _metaURI, uint24 _tax) returns()
func (_Harberger *HarbergerTransactor) Mint(opts *bind.TransactOpts, _metaURI string, _tax *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "mint", _metaURI, _tax)
}

// Mint is a paid mutator transaction binding the contract method 0xd868d852.
//
// Solidity: function mint(string _metaURI, uint24 _tax) returns()
func (_Harberger *HarbergerSession) Mint(_metaURI string, _tax *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Mint(&_Harberger.TransactOpts, _metaURI, _tax)
}

// Mint is a paid mutator transaction binding the contract method 0xd868d852.
//
// Solidity: function mint(string _metaURI, uint24 _tax) returns()
func (_Harberger *HarbergerTransactorSession) Mint(_metaURI string, _tax *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.Mint(&_Harberger.TransactOpts, _metaURI, _tax)
}

// SetMetaURI is a paid mutator transaction binding the contract method 0xed9745f1.
//
// Solidity: function setMetaURI(uint256 _tokenId, string _metaURI) returns()
func (_Harberger *HarbergerTransactor) SetMetaURI(opts *bind.TransactOpts, _tokenId *big.Int, _metaURI string) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "setMetaURI", _tokenId, _metaURI)
}

// SetMetaURI is a paid mutator transaction binding the contract method 0xed9745f1.
//
// Solidity: function setMetaURI(uint256 _tokenId, string _metaURI) returns()
func (_Harberger *HarbergerSession) SetMetaURI(_tokenId *big.Int, _metaURI string) (*types.Transaction, error) {
	return _Harberger.Contract.SetMetaURI(&_Harberger.TransactOpts, _tokenId, _metaURI)
}

// SetMetaURI is a paid mutator transaction binding the contract method 0xed9745f1.
//
// Solidity: function setMetaURI(uint256 _tokenId, string _metaURI) returns()
func (_Harberger *HarbergerTransactorSession) SetMetaURI(_tokenId *big.Int, _metaURI string) (*types.Transaction, error) {
	return _Harberger.Contract.SetMetaURI(&_Harberger.TransactOpts, _tokenId, _metaURI)
}

// SetOwnerURI is a paid mutator transaction binding the contract method 0x5d2c988f.
//
// Solidity: function setOwnerURI(uint256 _tokenId, string _ownerURI) returns()
func (_Harberger *HarbergerTransactor) SetOwnerURI(opts *bind.TransactOpts, _tokenId *big.Int, _ownerURI string) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "setOwnerURI", _tokenId, _ownerURI)
}

// SetOwnerURI is a paid mutator transaction binding the contract method 0x5d2c988f.
//
// Solidity: function setOwnerURI(uint256 _tokenId, string _ownerURI) returns()
func (_Harberger *HarbergerSession) SetOwnerURI(_tokenId *big.Int, _ownerURI string) (*types.Transaction, error) {
	return _Harberger.Contract.SetOwnerURI(&_Harberger.TransactOpts, _tokenId, _ownerURI)
}

// SetOwnerURI is a paid mutator transaction binding the contract method 0x5d2c988f.
//
// Solidity: function setOwnerURI(uint256 _tokenId, string _ownerURI) returns()
func (_Harberger *HarbergerTransactorSession) SetOwnerURI(_tokenId *big.Int, _ownerURI string) (*types.Transaction, error) {
	return _Harberger.Contract.SetOwnerURI(&_Harberger.TransactOpts, _tokenId, _ownerURI)
}

// SetPrice is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _tokenId, uint256 _price) returns()
func (_Harberger *HarbergerTransactor) SetPrice(opts *bind.TransactOpts, _tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "setPrice", _tokenId, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _tokenId, uint256 _price) returns()
func (_Harberger *HarbergerSession) SetPrice(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.SetPrice(&_Harberger.TransactOpts, _tokenId, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _tokenId, uint256 _price) returns()
func (_Harberger *HarbergerTransactorSession) SetPrice(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.SetPrice(&_Harberger.TransactOpts, _tokenId, _price)
}

// SetTax is a paid mutator transaction binding the contract method 0x49c994f6.
//
// Solidity: function setTax(uint256 _tokenId, uint24 _tax) returns()
func (_Harberger *HarbergerTransactor) SetTax(opts *bind.TransactOpts, _tokenId *big.Int, _tax *big.Int) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "setTax", _tokenId, _tax)
}

// SetTax is a paid mutator transaction binding the contract method 0x49c994f6.
//
// Solidity: function setTax(uint256 _tokenId, uint24 _tax) returns()
func (_Harberger *HarbergerSession) SetTax(_tokenId *big.Int, _tax *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.SetTax(&_Harberger.TransactOpts, _tokenId, _tax)
}

// SetTax is a paid mutator transaction binding the contract method 0x49c994f6.
//
// Solidity: function setTax(uint256 _tokenId, uint24 _tax) returns()
func (_Harberger *HarbergerTransactorSession) SetTax(_tokenId *big.Int, _tax *big.Int) (*types.Transaction, error) {
	return _Harberger.Contract.SetTax(&_Harberger.TransactOpts, _tokenId, _tax)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Harberger *HarbergerTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Harberger.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Harberger *HarbergerSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Harberger.Contract.TransferToVault(&_Harberger.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Harberger *HarbergerTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Harberger.Contract.TransferToVault(&_Harberger.TransactOpts, _token)
}

// HarbergerBalanceIterator is returned from FilterBalance and is used to iterate over the raw logs and unpacked data for Balance events raised by the Harberger contract.
type HarbergerBalanceIterator struct {
	Event *HarbergerBalance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerBalanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerBalance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerBalance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerBalanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerBalanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerBalance represents a Balance event raised by the Harberger contract.
type HarbergerBalance struct {
	TokenId    *big.Int
	Balance    *big.Int
	Expiration uint64
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBalance is a free log retrieval operation binding the contract event 0x4241d8d81dd5b27c6762f87a8ff720f78e0819948004511e6b313d5f2042d91e.
//
// Solidity: event Balance(uint256 indexed _tokenId, uint256 _balance, uint64 _expiration)
func (_Harberger *HarbergerFilterer) FilterBalance(opts *bind.FilterOpts, _tokenId []*big.Int) (*HarbergerBalanceIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "Balance", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerBalanceIterator{contract: _Harberger.contract, event: "Balance", logs: logs, sub: sub}, nil
}

// WatchBalance is a free log subscription operation binding the contract event 0x4241d8d81dd5b27c6762f87a8ff720f78e0819948004511e6b313d5f2042d91e.
//
// Solidity: event Balance(uint256 indexed _tokenId, uint256 _balance, uint64 _expiration)
func (_Harberger *HarbergerFilterer) WatchBalance(opts *bind.WatchOpts, sink chan<- *HarbergerBalance, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "Balance", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerBalance)
				if err := _Harberger.contract.UnpackLog(event, "Balance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerMetaURIIterator is returned from FilterMetaURI and is used to iterate over the raw logs and unpacked data for MetaURI events raised by the Harberger contract.
type HarbergerMetaURIIterator struct {
	Event *HarbergerMetaURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerMetaURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerMetaURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerMetaURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerMetaURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerMetaURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerMetaURI represents a MetaURI event raised by the Harberger contract.
type HarbergerMetaURI struct {
	TokenId *big.Int
	MetaURI string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetaURI is a free log retrieval operation binding the contract event 0x2ee7c03c5a3889ab660256a15297106a2c8054949ddf99f0cfb7151b54479325.
//
// Solidity: event MetaURI(uint256 indexed _tokenId, string _metaURI)
func (_Harberger *HarbergerFilterer) FilterMetaURI(opts *bind.FilterOpts, _tokenId []*big.Int) (*HarbergerMetaURIIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "MetaURI", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerMetaURIIterator{contract: _Harberger.contract, event: "MetaURI", logs: logs, sub: sub}, nil
}

// WatchMetaURI is a free log subscription operation binding the contract event 0x2ee7c03c5a3889ab660256a15297106a2c8054949ddf99f0cfb7151b54479325.
//
// Solidity: event MetaURI(uint256 indexed _tokenId, string _metaURI)
func (_Harberger *HarbergerFilterer) WatchMetaURI(opts *bind.WatchOpts, sink chan<- *HarbergerMetaURI, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "MetaURI", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerMetaURI)
				if err := _Harberger.contract.UnpackLog(event, "MetaURI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerOwnerURIIterator is returned from FilterOwnerURI and is used to iterate over the raw logs and unpacked data for OwnerURI events raised by the Harberger contract.
type HarbergerOwnerURIIterator struct {
	Event *HarbergerOwnerURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerOwnerURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerOwnerURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerOwnerURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerOwnerURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerOwnerURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerOwnerURI represents a OwnerURI event raised by the Harberger contract.
type HarbergerOwnerURI struct {
	TokenId  *big.Int
	OwnerURI string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerURI is a free log retrieval operation binding the contract event 0x759c09a94a68a7691a12067e728d8f20954654b9983e5b4d2bada705f1d81368.
//
// Solidity: event OwnerURI(uint256 indexed _tokenId, string _ownerURI)
func (_Harberger *HarbergerFilterer) FilterOwnerURI(opts *bind.FilterOpts, _tokenId []*big.Int) (*HarbergerOwnerURIIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "OwnerURI", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerOwnerURIIterator{contract: _Harberger.contract, event: "OwnerURI", logs: logs, sub: sub}, nil
}

// WatchOwnerURI is a free log subscription operation binding the contract event 0x759c09a94a68a7691a12067e728d8f20954654b9983e5b4d2bada705f1d81368.
//
// Solidity: event OwnerURI(uint256 indexed _tokenId, string _ownerURI)
func (_Harberger *HarbergerFilterer) WatchOwnerURI(opts *bind.WatchOpts, sink chan<- *HarbergerOwnerURI, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "OwnerURI", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerOwnerURI)
				if err := _Harberger.contract.UnpackLog(event, "OwnerURI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerPriceIterator is returned from FilterPrice and is used to iterate over the raw logs and unpacked data for Price events raised by the Harberger contract.
type HarbergerPriceIterator struct {
	Event *HarbergerPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerPrice represents a Price event raised by the Harberger contract.
type HarbergerPrice struct {
	TokenId *big.Int
	Price   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPrice is a free log retrieval operation binding the contract event 0xd1353c68e79ef70de84ee90d2facf845ec24895116d4a03505aa41785af71f5a.
//
// Solidity: event Price(uint256 indexed _tokenId, uint256 _price)
func (_Harberger *HarbergerFilterer) FilterPrice(opts *bind.FilterOpts, _tokenId []*big.Int) (*HarbergerPriceIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "Price", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerPriceIterator{contract: _Harberger.contract, event: "Price", logs: logs, sub: sub}, nil
}

// WatchPrice is a free log subscription operation binding the contract event 0xd1353c68e79ef70de84ee90d2facf845ec24895116d4a03505aa41785af71f5a.
//
// Solidity: event Price(uint256 indexed _tokenId, uint256 _price)
func (_Harberger *HarbergerFilterer) WatchPrice(opts *bind.WatchOpts, sink chan<- *HarbergerPrice, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "Price", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerPrice)
				if err := _Harberger.contract.UnpackLog(event, "Price", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Harberger contract.
type HarbergerRecoverToVaultIterator struct {
	Event *HarbergerRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerRecoverToVault represents a RecoverToVault event raised by the Harberger contract.
type HarbergerRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Harberger *HarbergerFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*HarbergerRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerRecoverToVaultIterator{contract: _Harberger.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Harberger *HarbergerFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *HarbergerRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerRecoverToVault)
				if err := _Harberger.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Harberger contract.
type HarbergerScriptResultIterator struct {
	Event *HarbergerScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerScriptResult represents a ScriptResult event raised by the Harberger contract.
type HarbergerScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Harberger *HarbergerFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*HarbergerScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerScriptResultIterator{contract: _Harberger.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Harberger *HarbergerFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *HarbergerScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerScriptResult)
				if err := _Harberger.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerTaxIterator is returned from FilterTax and is used to iterate over the raw logs and unpacked data for Tax events raised by the Harberger contract.
type HarbergerTaxIterator struct {
	Event *HarbergerTax // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerTaxIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerTax)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerTax)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerTaxIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerTaxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerTax represents a Tax event raised by the Harberger contract.
type HarbergerTax struct {
	TokenId *big.Int
	Tax     *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTax is a free log retrieval operation binding the contract event 0xc4bc46803cf7c2646cd32918f69e8ddb16d0cb3ccfe0b58190b359640850bf33.
//
// Solidity: event Tax(uint256 indexed _tokenId, uint24 _tax)
func (_Harberger *HarbergerFilterer) FilterTax(opts *bind.FilterOpts, _tokenId []*big.Int) (*HarbergerTaxIterator, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "Tax", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerTaxIterator{contract: _Harberger.contract, event: "Tax", logs: logs, sub: sub}, nil
}

// WatchTax is a free log subscription operation binding the contract event 0xc4bc46803cf7c2646cd32918f69e8ddb16d0cb3ccfe0b58190b359640850bf33.
//
// Solidity: event Tax(uint256 indexed _tokenId, uint24 _tax)
func (_Harberger *HarbergerFilterer) WatchTax(opts *bind.WatchOpts, sink chan<- *HarbergerTax, _tokenId []*big.Int) (event.Subscription, error) {

	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "Tax", _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerTax)
				if err := _Harberger.contract.UnpackLog(event, "Tax", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// HarbergerTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Harberger contract.
type HarbergerTransferIterator struct {
	Event *HarbergerTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HarbergerTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HarbergerTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HarbergerTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HarbergerTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HarbergerTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HarbergerTransfer represents a Transfer event raised by the Harberger contract.
type HarbergerTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_Harberger *HarbergerFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*HarbergerTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &HarbergerTransferIterator{contract: _Harberger.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_Harberger *HarbergerFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *HarbergerTransfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Harberger.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HarbergerTransfer)
				if err := _Harberger.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
